'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

exports['default'] = mdlHook;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _prepareProps = require('./prepare-props');

/**
 * Returns a lib rendering Target with mdl className,
 * handles lifecycle hooks
 * @param  {Object} config   The config object
 * @return {Function}        The lib function
 */

var _prepareProps2 = _interopRequireDefault(_prepareProps);

function mdlHook(config) {
  var displayName = config.displayName;
  var blockClassName = config.blockClassName;
  var _config$modifiers = config.modifiers;
  var modifiers = _config$modifiers === undefined ? [] : _config$modifiers;

  var propTypes = modifiers.reduce(function (acc, cur) {
    acc[cur.prop] = cur.type;
    return acc;
  }, {});

  var defaultProps = modifiers.reduce(function (acc, cur) {
    if (cur.hasOwnProperty('default')) {
      acc[cur.prop] = cur['default'];
    }
    return acc;
  }, {});

  var modifierClassNameFns = modifiers.reduce(function (acc, cur) {
    var className = cur.className;
    var classNameFn = cur.classNameFn;

    acc[cur.prop] = className ? function () {
      return className;
    } : classNameFn;
    return acc;
  }, {});

  return function lib(Target) {

    return (function (_React$Component) {
      _inherits(_class, _React$Component);

      _createClass(_class, null, [{
        key: 'displayName',
        value: displayName,
        enumerable: true
      }, {
        key: 'propTypes',
        value: propTypes,
        enumerable: true
      }, {
        key: 'defaultProps',
        value: defaultProps,
        enumerable: true
      }]);

      function _class(props) {
        _classCallCheck(this, _class);

        _get(Object.getPrototypeOf(_class.prototype), 'constructor', this).call(this, props);
        this.state = {
          targetProps: (0, _prepareProps2['default'])(props, { blockClassName: blockClassName, modifierClassNameFns: modifierClassNameFns })
        };
      }

      _createClass(_class, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(props) {
          var targetProps = (0, _prepareProps2['default'])(props, { blockClassName: blockClassName, modifierClassNameFns: modifierClassNameFns });
          this.setState({ targetProps: targetProps });
        }

        // credit: http://quaintous.com/2015/07/09/react-components-with-mdl/
      }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
          if (window.componentHandler) {
            window.componentHandler.upgradeDom();
          }
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(Target, this.state.targetProps);
        }
      }]);

      return _class;
    })(_react2['default'].Component);
  };
}

module.exports = exports['default'];